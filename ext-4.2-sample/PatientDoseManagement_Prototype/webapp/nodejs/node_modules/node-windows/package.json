{
  "name": "node-windows",
  "version": "0.1.7",
  "description": "Support for Windows services, event logging, UAC, and several helper methods for interacting with the OS.",
  "keywords": [
    "ngn",
    "windows",
    "service",
    "daemon",
    "logging",
    "event",
    "event logging",
    "elevate",
    "sudo",
    "task"
  ],
  "author": {
    "name": "Corey Butler",
    "email": "corey@coreybutler.com"
  },
  "devDependencies": {},
  "main": "lib/node-windows.js",
  "os": [
    "win32"
  ],
  "preferGlobal": true,
  "dependencies": {
    "optimist": "~0.6.0"
  },
  "readmeFilename": "README.md",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/coreybutler/node-windows.git"
  },
  "license": "MIT",
  "engine": "node >= 0.10.10",
  "readme": "# Update (9/11/14)\r\n\r\nThis project, along with node-mac and node-linux has undergone a couple of refactors. A new an improved version (which should be backwards compatible) is under construction right now. In the meantime, I have merged several of the PR's and bumped the version on npm.\r\n\r\n# Update (2/18/14)\r\n\r\n**tl;dr - Many updates made, more coming. Delayed for a good reason.**\r\n\r\nSince there has been more recent activity and a lot of requests/PR's recently, I figured I should address whats going on with node-windows. I have completed a lot of work on the next version & I'm trying to incorporate as much as I can into that version. Additionally, I have recently built a Windows network where CI will be happening in an effort to make it easier to contribute according to guidelines that suit all of the node-* projects.\r\n\r\nI also wanted to address the delays so folks know this project is far from abandoned. Under normal circumstances, issues and features would be fixed/released more regularly. However; over the last several months, I have been primarily preoccupied with my fiance's health. She was struck by a truck who ignored a stop sign (auto vs pedestrian). She is OK, but an extraordinary amount of time has been consumed with doctors/PT/ART/etc. What little time I've had has been dedicated to client contracts. I believe we're starting to reach a point where the schedule may ease up a bit, at which point I will have significantly more time to put into this project and the others. \r\n\r\n[![NPM version](https://badge.fury.io/js/node-windows.png)](http://badge.fury.io/js/node-windows)\r\n[![NGN Dependencies](https://david-dm.org/coreybutler/node-windows.png)](https://david-dm.org/coreybutler/node-windows)\r\n[![Build](https://api.travis-ci.org/coreybutler/node-windows.png)](https://travis-ci.org/coreybutler/node-windows)\r\n\r\nFollow the author on [G+](https://plus.google.com/u/1/111169756342687497578?rel=author)\r\nor [Twitter (@goldglovecb)](http://twitter.com/goldglovecb).\r\n\r\nThis README provides a pretty good overview of what node-windows has to offer, but better\r\ndocumentation is now available at the [node-windows documentation portal](http://coreybutler.github.io/node-windows).\r\n\r\n# node-windows\r\n\r\n  This is a standalone module, originally designed for internal use in [NGN](http://github.com/thinkfirst/NGN).\r\n  However; it is capable of providing the same features for Node.JS scripts\r\n  independently of NGN.\r\n\r\n  For alternative versions, see [node-mac](http://github.com/coreybutler/node-mac)\r\n  and [node-linux](http://github.com/coreybutler/node-linux)\r\n\r\n\r\n## Overview\r\n\r\nThe following features are available in node-windows:\r\n\r\n- **Service Management**: Run Node.js scripts as native Windows services. Includes monitoring.\r\n- **Event Logging**: Create logs in the Event log.\r\n- **Commands**:\r\n  - _Elevated Permissions_: Run a command with elevated privileges (may prompt user for acceptance)\r\n  - _Sudo_: Run an `exec` command as a sudoer.\r\n  - _Identify Administrative Privileges_: Determines whether the current user has administrative privileges.\r\n  - _List Tasks_: A method to list running windows tasks/services.\r\n  - _Kill Task_: A method to kill a specific windows service/task (by PID).\r\n\r\n## Installation\r\n\r\nThe recommended way to install node-windows is with npm, using the global flag:\r\n\r\n`npm install -g node-windows`\r\n\r\nThen, in your project root, run:\r\n\r\n`npm link node-windows`\r\n\r\nHowever; it is possible to use node-windows without the global flag (i.e. install directly into the project root). \r\nMore details regarding why this is not the recommended approach are available throughout this Readme.\r\n\r\n## NO NATIVE MODULES\r\n\r\nUsing native node modules on Windows can suck. Most native modules are not distributed in a binary format.\r\nInstead, these modules rely on `npm` to build the project, utilizing [node-gyp](https://github.com/TooTallNate/node-gyp).\r\nThis means developers need to have Visual Studio (and potentially other software) installed on the system,\r\njust to install a native module. This is portable, but painful... mostly because Visual Studio\r\nitself is over 2GB.\r\n\r\n**node-windows does not use native modules.** There are some binary/exe utilities, but everything\r\nneeded to run more complex tasks is packaged and distributed in a readily usable format. So, no need for\r\nVisual Studio... at least not for this module.\r\n\r\n---\r\n\r\n# Windows Services\r\n\r\nnode-windows has a utility to run Node.js scripts as Windows services. Please note that like all\r\nWindows services, creating one requires administrative privileges. To create a service with\r\nnode-windows, prepare a script like:\r\n\r\n```js\r\nvar Service = require('node-windows').Service;\r\n\r\n// Create a new service object\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  description: 'The nodejs.org example web server.',\r\n  script: 'C:\\\\path\\\\to\\\\helloworld.js'\r\n});\r\n\r\n// Listen for the \"install\" event, which indicates the\r\n// process is available as a service.\r\nsvc.on('install',function(){\r\n  svc.start();\r\n});\r\n\r\nsvc.install();\r\n```\r\n\r\nThe code above creates a new `Service` object, providing a pretty name and description.\r\nThe `script` attribute identifies the Node.js script that should run as a service. Upon running\r\nthis, the script will be visible from the Windows Services utility.\r\n\r\n![Windows Service](https://raw.github.com/coreybutler/node-windows/master/docs/service.png)\r\n\r\nThe `Service` object emits the following events:\r\n\r\n- _install_ - Fired when the script is installed as a service.\r\n- _alreadyinstalled_ - Fired if the script is already known to be a service.\r\n- _invalidinstallation_ - Fired if an installation is detected but missing required files.\r\n- _uninstall_ - Fired when an uninstallation is complete.\r\n- _start_ - Fired when the new service is started.\r\n- _stop_ - Fired when the service is stopped.\r\n- _error_ - Fired in some instances when an error occurs.\r\n\r\nIn the example above, the script listens for the `install` event. Since this event\r\nis fired when a service installation is complete, it is safe to start the service.\r\n\r\nServices created by node-windows are similar to most other services running on Windows.\r\nThey can be started/stopped from the windows service utility, via `NET START` or `NET STOP` commands,\r\nor even managed using the <a href=\"http://technet.microsoft.com/en-us/library/dd228922(v=ws.10).aspx\">sc</a>\r\nutility.\r\n\r\n### Environment Variables\r\n\r\nSometimes you may want to provide a service with static data, passed in on creation of the service. You can do this by setting environment variables in the service config, as shown below:\r\n\r\n```js\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  description: 'The nodejs.org example web server.',\r\n  script: 'C:\\\\path\\\\to\\\\helloworld.js',\r\n  env: {\r\n    name: \"HOME\",\r\n    value: process.env[\"USERPROFILE\"] // service is now able to access the user who created its' home directory\r\n  }\r\n});\r\n```\r\nYou can also supply an array to set multiple environment variables:\r\n\r\n```js\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  description: 'The nodejs.org example web server.',\r\n  script: 'C:\\\\path\\\\to\\\\helloworld.js',\r\n  env: [{\r\n    name: \"HOME\",\r\n    value: process.env[\"USERPROFILE\"] // service is now able to access the user who created its' home directory\r\n  },\r\n  {\r\n    name: \"TEMP\",\r\n    value: path.join(process.env[\"USERPROFILE\"],\"/temp\") // use a temp directory in user's home directory\r\n  }]\r\n});\r\n```\r\n\r\n\r\n### User Account Attributes\r\n\r\nIf you need to specify a specific user or particular credentials to manage a service, the following\r\nattributes may be helpful.\r\n\r\nThe `user` attribute is an object with three keys: `domain`,`account`, and `password`.\r\nThis can be used to identify which user the service library should use to perform system commands.\r\nBy default, the domain is set to the local computer name, but it can be overridden with an Active Directory\r\nor LDAP domain. For example:\r\n\r\n**app.js**\r\n```js\r\nvar Service = require('node-windows').Service;\r\n\r\n// Create a new service object\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  script: require('path').join(__dirname,'helloworld.js')\r\n});\r\n\r\nsvc.user.domain = 'mydomain.local';\r\nsvc.user.account = 'username';\r\nsvc.user.password = 'password';\r\n...\r\n```\r\n\r\nBoth the account and password must be explicitly defined if you want the service module to\r\nrun commands as a specific user. By default, it will run using the user account that launched\r\nthe process (i.e. who launched `node app.js`).\r\n\r\nThe other attribute is `sudo`. This attribute has a single property called `password`. By supplying\r\nthis, the service module will attempt to run commands using the user account that launched the\r\nprocess and the password for that account. This should only be used for accounts with administrative\r\nprivileges.\r\n\r\n**app.js**\r\n```js\r\nvar Service = require('node-windows').Service;\r\n\r\n// Create a new service object\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  script: require('path').join(__dirname,'helloworld.js')\r\n});\r\n\r\nsvc.sudo.password = 'password';\r\n...\r\n```\r\n\r\n### Cleaning Up: Uninstall a Service\r\n\r\nUninstalling a previously created service is syntactically similar to installation.\r\n\r\n```js\r\nvar Service = require('node-windows').Service;\r\n\r\n// Create a new service object\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  script: require('path').join(__dirname,'helloworld.js')\r\n});\r\n\r\n// Listen for the \"uninstall\" event so we know when it's done.\r\nsvc.on('uninstall',function(){\r\n  console.log('Uninstall complete.');\r\n  console.log('The service exists: ',svc.exists);\r\n});\r\n\r\n// Uninstall the service.\r\nsvc.uninstall();\r\n```\r\n\r\nThe uninstall process only removes process-specific files. **It does NOT delete your Node.js script!**\r\n\r\n### What Makes node-windows Services Unique?\r\n\r\nLots of things!\r\n\r\n**Long Running Processes & Monitoring:**\r\n\r\nThe built-in service recovery for Windows services is fairly limited and cannot easily be configured\r\nfrom code. Therefore, node-windows creates a wrapper around the Node.js script. This wrapper\r\nis responsible for restarting a failed service in an intelligent and configurable manner. For example,\r\nif your script crashes due to an unknown error, node-windows will attempt to restart it. By default,\r\nthis occurs every second. However; if the script has a fatal flaw that makes it crash repeatedly,\r\nit adds unnecessary overhead to the system. node-windows handles this by increasing the time interval\r\nbetween restarts and capping the maximum number of restarts.\r\n\r\n**Smarter Restarts That Won't Pummel Your Server:**\r\n\r\nUsing the default settings, node-windows adds 25% to the wait interval each time it needs to restart\r\nthe script. With the default setting (1 second), the first restart attempt occurs after one second.\r\nThe second occurs after 1.25 seconds. The third after 1.56 seconds (1.25 increased by 25%) and so on.\r\nBoth the initial wait time and the growth rate are configuration options that can be passed to a new\r\n`Service`. For example:\r\n\r\n```js\r\nvar svc = new Service({\r\n  name:'Hello World',\r\n  description: 'The nodejs.org example web server.',\r\n  script: 'C:\\\\path\\\\to\\\\helloworld.js'),\r\n  wait: 2,\r\n  grow: .5\r\n});\r\n```\r\n\r\nIn this example, the wait period will start at 2 seconds and increase by 50%. So, the second attempt\r\nwould be 3 seconds later while the fourth would be 4.5 seconds later.\r\n\r\n**Don't DOS Yourself!**\r\n\r\nRepetitive recycling could potentially go on forever with a bad script. To handle these situations, node-windows\r\nsupports two kinds of caps. Using `maxRetries` will cap the maximum number of restart attempts. By\r\ndefault, this is unlimited. Setting it to 3 would tell the process to no longer restart a process\r\nafter it has failed 3 times. Another option is `maxRestarts`, which caps the number of restarts attempted\r\nwithin 60 seconds. For example, if this is set to 3 (the default) and the process crashes/restarts repeatedly,\r\nnode-windows will cease restart attempts after the 3rd cycle in a 60 second window. Both of these\r\nconfiguration options can be set, just like `wait` or `grow`.\r\n\r\nFinally, an attribute called `abortOnError` can be set to `true` if you want your script to **not** restart\r\nat all when it exits with an error.\r\n\r\n### How Services Are Made\r\n\r\nnode-windows uses the [winsw](https://github.com/kohsuke/winsw) utility to create a unique `.exe`\r\nfor each Node.js script deployed as a service. A directory called `daemon` is created and populated\r\nwith `myappname.exe` and `myappname.xml`. The XML file is a configuration for the executable. Additionally,\r\n`winsw` will create some logs for itself in this directory (which are viewable in the Event log).\r\n\r\nThe `myappname.exe` file launches the node-windows wrapper, which is responsible for monitoring and managing\r\nthe script. Since this file is a part of node-windows, moving the node-windows directory could result in\r\nthe `.exe` file not being able to find the Node.js script. However; this should not be a problem if\r\nnode-windows is installed globally, per the recommended installation instructions.\r\n\r\nAll of these daemon-specific files are created in a subdirectory called `daemon`, which is created in the\r\nsame directory where the Node.js script is saved. Uninstalling a service will remove these files.\r\n\r\n_Event Logging_\r\n\r\nServices created with node-windows have two event logs that can be viewed through the Windows Event Viewer.\r\nA log source named `myappname.exe` provides basic logging for the executable file. It can be used to see\r\nwhen the entire service starts/stops or has errors. A second log, named after your service name (i.e. My App Name),\r\nis used by the node-windows monitor. It is possible to write to this log from the Node.js script using\r\nthe node-windows Event Logging.\r\n\r\n---\r\n\r\n# Event Logging\r\n\r\nNew as of `v0.1.0` is a _non-C++_ based event logging utility. This utility can write to the event log,\r\nmaking your logs visible from the Event Viewer.\r\n\r\nTo create a logger:\r\n\r\n```js\r\nvar EventLogger = require('node-windows').EventLogger;\r\n\r\nvar log = new EventLogger('Hello World');\r\n\r\nlog.info('Basic information.');\r\nlog.warn('Watch out!');\r\nlog.error('Something went wrong.');\r\n```\r\n\r\nLooks similar to:\r\n\r\n![Event Logging in node-windows](https://raw.github.com/coreybutler/node-windows/master/docs/eventlog.png)\r\n\r\nSome lesser-used options are also available through node-windows event logging.\r\n\r\n```js\r\nlog.auditSuccess('AUser Login Success');\r\nlog.auditFailure('AUser Login Failure');\r\n```\r\n\r\nEach log type (info, warn, error, auditSuccess, and auditFailure) method optionally accepts two additional\r\narguments, including a _code_ and _callback_. By default, the event code is `1000` if not otherwise specified.\r\nTo provide a custom event code with a log message and write that message to the console, the following code could\r\nbe used:\r\n\r\n```js\r\nlog.info('Something different happened!', 1002, function(){\r\n  console.log('Something different happened!');\r\n});\r\n```\r\n\r\nBy default, event logs are all part of the `APPLICATION` scope. However; it is also possible to use the `SYSTEM` log.\r\nTo do this, a configuration object must be passed to the new log:\r\n\r\n```js\r\nvar EventLogger = require('node-windows').EventLogger;\r\nvar log = new EventLogger({\r\n  source: 'My Event Log',\r\n  eventLog: 'SYSTEM'\r\n});\r\n```\r\n\r\n---\r\n\r\n# Commands\r\n\r\nnode-windows ships with several commands to simplify tasks on MS Windows.\r\n\r\n## elevate\r\n\r\nElevate is similar to `sudo` on Linux/Mac. It attempts to elevate the privileges of the\r\ncurrent user to a local administrator. Using this does not require a password, but it\r\ndoes require that the current user have administrative privileges. Without these\r\nprivileges, the command will fail with a `access denied` error.\r\n\r\nOn systems with UAC enabled, this may prompt the user for permission to proceed:\r\n\r\n![UAC Prompt](http://upload.wikimedia.org/wikipedia/en/5/51/Windows_7_UAC.png)\r\n\r\n**Syntax**:\r\n\r\n`elevate(cmd[,options,callback])`\r\n\r\n- _cmd_: The command to execute with elevated privileges. This can be any string that would be typed at the command line.\r\n- _options_ (optional): Any options that will be passed to `require('child_process').exec(cmd,<OPTIONS>,callback)`.\r\n- _callback_ (optional): The callback function passed to `require('child_process').exec(cmd,options,<CALLBACK>)`.\r\n\r\n## sudo\r\n\r\nSudo acts similarly to `sudo` on Linux/Mac. Unlike _elevate_, it requires a password, but it\r\nwill not prompt the user for permission to proceed. Like _elevate_, this\r\n_still requires administrative privileges_ for the user, otherwise the command will fail.\r\nThe primary difference between this and _elevate()_ is the prompt.\r\n\r\n**Syntax**:\r\n\r\n`sudo(cmd,password[,options,callback])`\r\n\r\n- _cmd_: The command to execute with elevated privileges. This can be any string that would be typed at the command line.\r\n- _password_: The password of the user\r\n- _options_ (optional): Any options that will be passed to `require('child_process').exec(cmd,<OPTIONS>,callback)`.\r\n- _callback_ (optional): The callback function passed to `require('child_process').exec(cmd,options,<CALLBACK>)`.\r\n\r\n## isAdminUser\r\n\r\nThis asynchronous command determines whether the current user has administrative privileges.\r\nIt passes a boolean value to the callback, returning `true` if the user is an administrator\r\nor `false` if it is not.\r\n\r\n**Example**\r\n\r\n```js\r\nvar wincmd = require('node-windows');\r\n\r\nwincmd.isAdminUser(function(isAdmin){\r\n  if (isAdmin) {\r\n    console.log('The user has administrative privileges.');\r\n  } else {\r\n    console.log('NOT AN ADMIN');\r\n  }\r\n});\r\n```\r\n\r\n## list\r\n\r\nThe list method queries the operating system for a list of running processes.\r\n\r\n```js\r\nvar wincmd = require('node-windows');\r\n\r\nwincmd.list(function(svc){\r\n  console.log(svc);\r\n},true);\r\n```\r\n\r\nThis returns an array of running processes. Supplying the optional `true`\r\nargument in the above example provides a list with verbose output. The output is\r\nspecific to the version of the operating system. Here is an example of verbose\r\noutput on a Windows 8 computer.\r\n\r\n```js\r\n[{\r\n  ImageName: 'cmd.exe',\r\n  PID: '12440',\r\n  SessionName: 'Console',\r\n  'Session#': '1',\r\n  MemUsage: '1,736 K',\r\n  Status: 'Unknown',\r\n  UserName: 'Machine\\\\Corey',\r\n  CPUTime: '0:00:00',\r\n  WindowTitle: 'N/A'\r\n},{\r\n  ImageName: 'tasklist.exe',\r\n  PID: '1652',\r\n  SessionName: 'Console',\r\n  'Session#': '1',\r\n  MemUsage: '8,456 K',\r\n  Status: 'Unknown',\r\n  UserName: 'Machine\\\\Corey',\r\n  CPUTime: '0:00:00',\r\n  WindowTitle: 'N/A'\r\n}]\r\n```\r\n\r\nThe regualar (non-verbose) output typically provides the `ImageName`,`PID`,`SessionName`,\r\n`Session#`, `MemUsage`, and `CPUTime`.\r\n\r\n## kill\r\n\r\nThis method will kill a process by `PID`.\r\n\r\n\r\n```js\r\nvar wincmd = require('node-windows');\r\n\r\nwincmd.kill(12345,function(){\r\n  console.log('Process Killed');\r\n});\r\n```\r\n\r\nIn this example, process ID `12345` would be killed. It is important to note that the\r\nuser account executing this node script may require administrative privileges.\r\n\r\n# Troubleshooting\r\n\r\nIf you're experiencing issues with the examples, please review the `TESTS.md` file.\r\n\r\nIf you are encountering the _invalidinstallation_ event, take a look at the `daemon`\r\ndirectory that is created during the installation to make sure the `.exe` and `.xml`\r\nfiles are there. In some circumstances, primarily during _un_installation, it is\r\npossbile for the process to temporarily lock a log file, which prevents Windows\r\nfrom removing it. In this scenario, simply run the uninstall again. In most cases this\r\nwill fix the issue. If not, manually remove the `daemon` directory before running the\r\ninstallation again.\r\n\r\n# Licenses\r\n\r\nwinsw and sudowin are the copyrights of their respective owners. winsw\r\nis distributed under an MIT license. sudowin is distributed under a BSD license.\r\n\r\nAll other scripts are Copyright (c) Corey Butler under an MIT license.\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Corey Butler\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "bugs": {
    "url": "https://github.com/coreybutler/node-windows/issues"
  },
  "homepage": "https://github.com/coreybutler/node-windows",
  "_id": "node-windows@0.1.7",
  "_from": "node-windows@"
}
